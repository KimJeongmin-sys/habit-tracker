{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Habit","handleIncrement","_this","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","concat","this","name","_this$props$habit","count","react_default","a","createElement","className","onClick","class","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","_this2","Fragment","habitAddForm","habits","map","components_habit","key","id","onReset","Component","Navbar","totalCount","SimpleHabit","_useState","useState","_useState2","Object","slicedToArray","setCount","spanRef","useRef","useCallback","useEffect","ReactDOM","render","simpleHabit","document","getElementById"],"mappings":"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","file":"static/js/main.747a586c.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nclass Habit extends PureComponent {\r\n  // state = {\r\n  //   count: 0,\r\n  // };\r\n  componentDidMount() {\r\n    console.log(`habit: ${this.props.habit.name} mounted`);\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(`habit: ${this.props.habit.name} will unmounted`);\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    this.props.onIncrement(this.props.habit);\r\n    //state 오브젝트 안에 있는 count를 증가 한뒤 state를 업데이트 해야함.\r\n    // this.state.count += 1 => 이런식으로 코딩할 경우, 리액트에서는 업데이트가 되었는지 알 수 없음.\r\n    // this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit);\r\n    // const count = this.state.count - 1;\r\n    // this.setState({ count: count < 0 ? 0 : count });\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit);\r\n  };\r\n\r\n  render() {\r\n    console.log(\"habit render!\");\r\n    const { name, count } = this.props.habit; //동일한 네이밍\r\n    // const { name } = this.props.habit;\r\n    // const { count } = this.props;\r\n    console.log(`name: ${name}`);\r\n    console.log(`count: ${count}`);\r\n    return (\r\n      <li className=\"habit\">\r\n        <span className=\"habit-name\">{name}</span>\r\n        <span className=\"habit-count\">{count}</span>\r\n        <button\r\n          className=\"habit-button habit-increase\"\r\n          onClick={this.handleIncrement}\r\n        >\r\n          <i class=\"far fa-plus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-decrease\"\r\n          onClick={this.handleDecrement}\r\n        >\r\n          <i class=\"far fa-minus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-delete\"\r\n          onClick={this.handleDelete}\r\n          // onClick={event => {\r\n          //   this.props.onDelete(this.props.habit);\r\n          // }}\r\n        >\r\n          <i class=\"fas fa-trash\"></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habit;\r\n","// import React, { PureComponent } from \"react\";\r\n\r\n// //Class 컴포넌트\r\n// class HabitAddForm extends PureComponent {\r\n//   formRef = React.createRef();\r\n//   inputRef = React.createRef();\r\n//   onSubmit = event => {\r\n//     event.preventDefault();\r\n//     const name = this.inputRef.current.value;\r\n//     name && this.props.onAdd(name); //App컴포넌트가 생성될 때 한번 할당된 이후로 업데이트되지 않음.\r\n//     this.formRef.current.reset();\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <form ref={this.formRef} className=\"add-form\" onSubmit={this.onSubmit}>\r\n//         <input\r\n//           ref={this.inputRef}\r\n//           type=\"text\"\r\n//           className=\"add-input\"\r\n//           placeholder=\"Habit\"\r\n//         />\r\n//         <button className=\"add-button\">Add</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n// export default HabitAddForm;\r\n\r\n//Function 컴포넌트\r\nimport React, { memo } from \"react\";\r\n\r\nconst HabitAddForm = memo(props => {\r\n  const formRef = React.createRef();\r\n  const inputRef = React.createRef();\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    const name = inputRef.current.value;\r\n    name && props.onAdd(name); //App컴포넌트가 생성될 때 한번 할당된 이후로 업데이트되지 않음.\r\n    formRef.current.reset();\r\n  };\r\n  console.log(\"habitAddForm render!\");\r\n  return (\r\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        className=\"add-input\"\r\n        placeholder=\"Habit\"\r\n      />\r\n      <button className=\"add-button\">Add</button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from \"react\";\r\nimport Habit from \"./habit\";\r\nimport HabitAddForm from \"./habitAddForm\";\r\n\r\nclass Habits extends Component {\r\n  handleIncrement = habit => {\r\n    this.props.onIncrement(habit);\r\n  };\r\n\r\n  handleDecrement = habit => {\r\n    this.props.onDecrement(habit);\r\n  };\r\n\r\n  handleDelete = habit => {\r\n    this.props.onDelete(habit);\r\n  };\r\n  handleAdd = name => {\r\n    this.props.onAdd(name);\r\n  };\r\n\r\n  render() {\r\n    console.log(\"habits render!\");\r\n    return (\r\n      <>\r\n        <HabitAddForm onAdd={this.handleAdd} />\r\n        <ul>\r\n          {this.props.habits.map(habit => (\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              // count={habit.count}\r\n              onIncrement={this.handleIncrement}\r\n              onDecrement={this.handleDecrement}\r\n              onDelete={this.handleDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\r\n          Reset All\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habits;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    console.log(\"navbar render!\");\r\n    // return <div>Habit Tracker</div>;\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <i className=\"navbar-logo fas fa-leaf\"></i>\r\n        <span>Habit Tracker</span>\r\n        {/* this.props.totalCount를 이용하여 부모(app)의 totalCount 데이터를 뿌려줌 */}\r\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n// function App() {\n//   return (\n//     <React.Fragment>\n//       <Navbar />\n//       <Habits />\n//     </React.Fragment>\n//   );\n// }\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  handleIncrement = habit => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n    this.setState({ habits }); //habits: habits\n  };\n\n  handleDecrement = habit => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits }); //habits: habits\n  };\n\n  handleDelete = habit => {\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = name => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    // handleReset = () => {\n    //   const habits = this.state.habits.map(habit => {\n    //     habit.count = 0;\n    //     return habit;\n    //   });\n    // const habits = [...this.state.habits];\n    // habits.map(habit => {\n    //   habit.count = 0;\n    // });\n\n    this.setState({ habits });\n  };\n\n  render() {\n    console.log(\"app render!\");\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter(item => item.count > 0).length} //habit의 개수\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// export default App;\n\n// // const name = \"ellie\";\n// const name = undefined;\n// return (\n//   <React.Fragment>\n//     {/* <h1>Hello {name}:)</h1> */}\n//     <h1>Hello</h1>\n//     {name && <h1>Hello {name}:)</h1>}\n//     {[\"🐶\", \"🐱\"].map(item => (\n//       <h1>{item}</h1>\n//     ))}\n//   </React.Fragment>\n// );\n","import React, {\r\n  Component,\r\n  useRef,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\n\r\nconst SimpleHabit = props => {\r\n  const [count, setCount] = useState(0);\r\n  const spanRef = useRef();\r\n\r\n  const handleIncrement = useCallback(() => {\r\n    setCount(count + 1);\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(`mounted & updated!: ${count}`);\r\n  }, []); //두번째 인자인 배열에 변수를 넣으면 해당 변수가 update될 때 호출(공백이면 update될 때 호출이 안됨.)\r\n\r\n  return (\r\n    <li className=\"habit\">\r\n      <span ref={spanRef} className=\"habit-name\">\r\n        Reading\r\n      </span>\r\n      <span className=\"habit-count\">{count}</span>\r\n      <button className=\"habit-button habit-increase\" onClick={handleIncrement}>\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default SimpleHabit;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nimport SimpleHabit from \"./components/simpleHabit\";\nReactDOM.render(<SimpleHabit />, document.getElementById(\"root\"));\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n//'root' id 요소에 App컴포넌트를 연결\n"],"sourceRoot":""}